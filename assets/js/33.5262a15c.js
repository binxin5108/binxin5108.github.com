(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{525:function(v,_,t){"use strict";t.r(_);var r=t(22),e=Object(r.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("ul",[t("li",[t("strong",[v._v("行为型模式")]),v._v("关注点“"),t("strong",[v._v("怎样运行对象/类？")]),v._v("”所以我们关注下类/对象的运行时流程控制")]),v._v(" "),t("li",[v._v("行为型模式用于描述程序在运行时复杂的流程控制，")]),v._v(" "),t("li",[v._v("描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配。")]),v._v(" "),t("li",[v._v("行为型模式分为"),t("strong",[v._v("类行为模式")]),v._v("和"),t("strong",[v._v("对象行为模式")]),v._v("，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为。由于组合关系或聚合关系比继承关系耦合度低，满足“"),t("strong",[v._v("合成复用原则")]),v._v("”，所以对象行为模式比类行为模式具有更大的灵活性。")])]),v._v(" "),t("p",[v._v("行为型模式包括：")]),v._v(" "),t("ul",[t("li",[v._v("模板方法（Template Method）模式：父类定义算法骨架，某些实现放在子类")]),v._v(" "),t("li",[v._v("策略（Strategy）模式：每种算法独立封装，根据不同情况使用不同算法策略")]),v._v(" "),t("li",[v._v("状态（State）模式：每种状态独立封装，不同状态内部封装了不同行为")]),v._v(" "),t("li",[v._v("命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开")]),v._v(" "),t("li",[v._v("职责链（Chain of Responsibility）模式：所有处理者封装为链式结构，依次调用")]),v._v(" "),t("li",[v._v("备忘录（Memento）模式：把核心信息抽取出来，可以进行保存")]),v._v(" "),t("li",[v._v("解释器（Interpreter）模式：定义语法解析规则")]),v._v(" "),t("li",[v._v("观察者（Observer）模式：维护多个观察者依赖，状态变化通知所有观察者")]),v._v(" "),t("li",[v._v("中介者（Mediator）模式：取消类/对象的直接调用关系，使用中介者维护")]),v._v(" "),t("li",[v._v("迭代器（Iterator）模式：定义集合数据的遍历规则")]),v._v(" "),t("li",[v._v("访问者（Visitor）模式：分离对象结构，与元素的执行算法")])]),v._v(" "),t("p",[v._v("除了"),t("strong",[v._v("模板方法模式")]),v._v("和"),t("strong",[v._v("解释器模式")]),v._v("是"),t("strong",[v._v("类行为型模式")]),v._v("，"),t("strong",[v._v("其他")]),v._v("的全部属于"),t("strong",[v._v("对象行为型模式")])])])}),[],!1,null,null,null);_.default=e.exports}}]);