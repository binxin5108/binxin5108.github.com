(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{547:function(a,t,e){"use strict";e.r(t);var s=e(22),v=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[a._v("Java内存模型描述了Java虚拟机如何在计算机的内存（RAM）中工作。 Java虚拟机其实是个计算机的模型，因此该模型自然包含一个内存模型-那就是Java内存模型。")]),a._v(" "),e("p",[a._v("如果要设计出行为表现正确的并发程序，就必须了解Java内存模型。 Java内存模型描述了不同线程如何以及何时可以看到被其他线程写入到共享变量的值，以及在必要时如何同步对共享变量的访问。")]),a._v(" "),e("p",[a._v("原始的Java内存模型存在着欠缺，因此在Java 1.5版本中对Java内存模型进行了修订。 此版本的Java内存模型仍在Java 8中继续使用。")]),a._v(" "),e("h1",{attrs:{id:"java内存模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java内存模型"}},[a._v("#")]),a._v(" Java内存模型")]),a._v(" "),e("p",[e("code",[a._v("JVM")]),a._v("内部将内存分为线程堆栈（"),e("code",[a._v("thread stacks")]),a._v("）和堆("),e("code",[a._v("heap")]),a._v(")。下图从逻辑角度阐明了Java内存模型：\n"),e("img",{attrs:{src:"http://img.zhoubg.cn/FrxpxZG5pb-X_flvRVdawLWOBIDH",alt:"image.png"}})]),a._v(" "),e("p",[a._v("Java虚拟机中运行的每个线程都有其自己的线程堆栈。线程堆栈包含了当前线程调用了哪些方法以及当前执行点的信息。我们将其称为“调用堆栈”。当线程执行其代码时，调用堆栈也随之改变。")]),a._v(" "),e("p",[a._v("线程堆栈还包含正在执行的每个方法（调用堆栈上的所有方法）的所有局部变量。每个线程只能访问自己的线程堆栈。由线程创建的局部变量对其他的线程是不可见的。即使两个线程执行的代码完全相同，这两个线程仍将在各自的线程堆栈中创建该代码的局部变量。因此，每个线程对每个局部变量都有其自己的版本。")]),a._v(" "),e("p",[a._v("所有原始类型的局部变量（ "),e("code",[a._v("boolean, byte, short, char, int, long, float, double")]),a._v("）都完全存储在线程堆栈中，对其他线程是不可见。一个线程可以将一个原始类型的变量副本传递给另一个线程，但是它不能共享变量本身。")]),a._v(" "),e("p",[a._v("堆里面包含了Java应用程序中创建的所有对象，不管创建对象的线程是什么。这其中包括了基本数据类型的包装对象（例如Byte，Integer，Long等）。不管一个对象是作为方法的局部变量或者是类的成员变量，该对象本身仍然是存储在堆中的。")]),a._v(" "),e("p",[a._v("说明了调用堆栈和存储在线程堆栈上的局部变量以及存储在堆上的对象的关系图：")]),a._v(" "),e("p",[e("img",{attrs:{src:"http://img.zhoubg.cn/FnMVOeHXm3nfgwAWN94SWIAqjVbl",alt:"image.png"}})]),a._v(" "),e("p",[a._v("局部变量可以是原始类型，在这种情况下，它完全保留在线程堆栈中。")]),a._v(" "),e("p",[a._v("局部变量也可以是对对象的引用。在这种情况下，引用（局部变量）存储在线程堆栈中，但是对象本身存储在堆中。")]),a._v(" "),e("p",[a._v("一个对象可能包含方法，而这些方法可能包含局部变量。虽然这些方法所属的对象存储在堆中，但这些局部变量还是存储在线程堆栈中。")]),a._v(" "),e("p",[a._v("对象的成员变量与对象本身一起存储在堆中，不管成员变量是原始类型还是对对象的引用。")]),a._v(" "),e("p",[a._v("静态类变量也与类定义一起存储在堆中。")]),a._v(" "),e("p",[a._v("所有线程都可以通过对对象的引用访问堆上的对象。当线程可以访问某个对象时，它也可以访问该对象的成员变量。如果两个线程同时在同一个对象上调用方法，则它们都将有权访问该对象的成员变量，但是每个线程将拥有自己的局部变量副本。")]),a._v(" "),e("p",[a._v("这是说明以上几点的图示：")]),a._v(" "),e("p",[e("img",{attrs:{src:"http://img.zhoubg.cn/FgiKBonGjPNtXPF4PD43oeFKHBoh",alt:"image.png"}})]),a._v(" "),e("p",[a._v("两个线程都具有一组局部变量。局部变量"),e("code",[a._v("Local variable 2")]),a._v("指向堆上的共享对象"),e("code",[a._v("Object3")]),a._v("。这两个线程分别具有对同一对象的不同引用。它们的引用是局部变量，因此存储在每个线程的自己的线程堆栈中。但是，两个不同的引用都指向存储在堆上的同一对象。")]),a._v(" "),e("p",[a._v("请注意，共享对象"),e("code",[a._v("Object3")]),a._v("拥有两个成员变量，他们是引用类型，分别指向了对象"),e("code",[a._v("Object2")]),a._v(" 和 对象"),e("code",[a._v("Object4")]),a._v("（如图中从"),e("code",[a._v("Object3")]),a._v("到"),e("code",[a._v("Object2")]),a._v("和"),e("code",[a._v("Object4")]),a._v("的箭头所示）。通过"),e("code",[a._v("Object3")]),a._v("中的这些成员变量引用，两个线程就可以访问"),e("code",[a._v("Object2")]),a._v("和"),e("code",[a._v("Object4")]),a._v("。")]),a._v(" "),e("p",[a._v("该图中还显示了一个局部变量"),e("code",[a._v("Local variable 1")]),a._v("，该局部变量分别指向堆上的两个不同对象"),e("code",[a._v("Object1")]),a._v("和"),e("code",[a._v("Object5")]),a._v(",而不是同一个对象。理论上，当两个线程都引用了两个对象时，则两个线程都可以访问对"),e("code",[a._v("Object1")]),a._v("和对"),e("code",[a._v("Object5")]),a._v("。但是在上图中，每个线程仅具有对两个对象之一的引用,所有他们只能访问各自引用的对象。")]),a._v(" "),e("p",[a._v("那么，哪种Java代码可能实现上面的内存图？好吧，看如下的代码，是不是很简单：")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MyRunnable")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Runnable")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("methodOne")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("methodOne")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" localVariable1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("45")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MySharedObject")]),a._v(" localVariable2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MySharedObject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("sharedInstance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            \n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//... do more with local variables.")]),a._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("methodTwo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("methodTwo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" localVariable1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("99")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//... do more with local variable.")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MySharedObject")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//static variable pointing to instance of MySharedObject")]),a._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MySharedObject")]),a._v(" sharedInstance "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MySharedObject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//member variables pointing to two objects on the heap")]),a._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" object2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("22")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" object4 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("44")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//member variables of primary type")]),a._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" member1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("12345")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" member2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("67890")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),e("p",[a._v("如果有两个线程正在执行"),e("code",[a._v("run（）")]),a._v("方法，那么前面显示的图就是结果。 "),e("code",[a._v("run（）")]),a._v("方法调用"),e("code",[a._v("methodOne（）")]),a._v("，"),e("code",[a._v("methodOne（）")]),a._v("调用"),e("code",[a._v("methodTwo（）")]),a._v("。")]),a._v(" "),e("p",[e("code",[a._v("methodOne（）")]),a._v("声明一个原始的局部变量（int类型的"),e("code",[a._v("localVariable1")]),a._v("）和一个作为对象引用的局部变量（"),e("code",[a._v("localVariable2")]),a._v("）。")]),a._v(" "),e("p",[a._v("每个执行"),e("code",[a._v("methodOne（）")]),a._v("的线程将在各自的线程堆栈上创建自己的"),e("code",[a._v("localVariable1")]),a._v("和"),e("code",[a._v("localVariable2")]),a._v("副本。 "),e("code",[a._v("localVariable1")]),a._v("变量将完全的彼此分离，仅存在于每个线程的线程堆栈中。一个线程看不到另一个线程对其"),e("code",[a._v("localVariable1")]),a._v("副本所做的更改。")]),a._v(" "),e("p",[a._v("每个执行"),e("code",[a._v("methodOne（）")]),a._v("的线程还将创建自己的"),e("code",[a._v("localVariable2")]),a._v("副本。但是，"),e("code",[a._v("localVariable2")]),a._v("的两个不同副本最终都指向堆上的同一对象。该代码将"),e("code",[a._v("localVariable2")]),a._v("设置为静态变量,变量引用指向的对象只有一个副本，并且此副本存储在堆中。因此，"),e("code",[a._v("localVariable2")]),a._v("的两个副本最终都指向静态变量引用的"),e("code",[a._v("MySharedObject")]),a._v("的同一实例。 "),e("code",[a._v("MySharedObject")]),a._v("实例也存储在堆中。它对应于上图中的"),e("code",[a._v("Object3")]),a._v("。")]),a._v(" "),e("p",[a._v("注意"),e("code",[a._v("MySharedObject")]),a._v("类也包含两个成员变量。成员变量本身与对象一起存储在堆中。这两个成员变量指向另外两个"),e("code",[a._v("Integer")]),a._v("对象。这些整数对象对应于上图中的"),e("code",[a._v("Object2")]),a._v("和"),e("code",[a._v("Object4")]),a._v("。")]),a._v(" "),e("p",[a._v("还要注意"),e("code",[a._v("methodTwo（）")]),a._v("如何创建一个名为"),e("code",[a._v("localVariable1")]),a._v("的局部变量。此局部变量是对Integer对象的对象引用。该方法将"),e("code",[a._v("localVariable1")]),a._v("引用设置为指向新的Integer实例。执行"),e("code",[a._v("methodTwo（）")]),a._v("的每个线程的"),e("code",[a._v("localVariable1")]),a._v("引用将存储在一个副本中。实例化的两个Integer对象将存储在堆上，但是由于该方法每次执行该方法时都会创建一个新的"),e("code",[a._v("Integer")]),a._v("对象，因此执行此方法的两个线程将创建单独的Integer实例。在"),e("code",[a._v("methodTwo（）")]),a._v("内部创建的Integer对象对应于上图中的"),e("code",[a._v("Object1")]),a._v("和"),e("code",[a._v("Object5")]),a._v("。")]),a._v(" "),e("p",[a._v("还请注意类"),e("code",[a._v("MySharedObject")]),a._v("中的两个成员变量，其类型为"),e("code",[a._v("long")]),a._v("，这是原始类型。由于这些变量是成员变量，因此它们仍与对象一起存储在堆中。仅局部变量存储在线程堆栈上。")]),a._v(" "),e("h1",{attrs:{id:"硬件内存结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#硬件内存结构"}},[a._v("#")]),a._v(" 硬件内存结构")]),a._v(" "),e("p",[a._v("现代硬件内存体系结构与虚拟机内部的Java内存模型有所不同。了解硬件内存架构并了解Java内存模型如何与之协同工作同样也很重要。 本节将描述常见的硬件内存体系结构，下一节将描述Java内存模型如何与之协同工作。")]),a._v(" "),e("p",[a._v("这是现代计算机硬件体系结构的简化图：")]),a._v(" "),e("p",[e("img",{attrs:{src:"http://img.zhoubg.cn/Fiw4fKT3Hkfg1fVU4PfmYuG3539r",alt:"image.png"}})]),a._v(" "),e("p",[a._v("现代计算机通常其中装有2个或更多的CPU，其中一些CPU也可能具有多个内核。关键是，在具有2个或更多CPU的现代计算机上，可能同时运行多个线程。每个CPU都可以在任何给定时间运行一个线程。这意味着，如果Java应用程序是多线程的，则每个CPU可能在Java应用程序中同时（并发）运行一个线程。")]),a._v(" "),e("p",[a._v("每个CPU包含一组寄存器，这些寄存器本质上是CPU内存。 CPU在这些寄存器上执行操作的速度比对主存储器中的变量执行操作的速度快得多。这是因为CPU可以比访问主存储器更快地访问这些寄存器。")]),a._v(" "),e("p",[a._v("每个CPU可能还具有一个CPU高速缓存存储层。实际上，大多数现代CPU都具有一定大小的缓存层。 CPU访问其高速缓存层比访问主存储器更快，但是通常不如访问寄存器的速度快。因此，CPU高速缓存内存访问速度介于寄存器和主内存的速度之间。某些CPU可能具有多个高速缓存层（1级缓存和2级缓存），但是了解Java内存模型如何与内存交互并不重要。重要的是要知道CPU可以具有某种高速缓存层。")]),a._v(" "),e("p",[a._v("计算机还包含一个主存储区（RAM），所有CPU都可以访问主存储器，主存储区通常比CPU的缓存大得多。")]),a._v(" "),e("p",[a._v("通常，当CPU需要访问主存储器时，它将部分主存储器内容读入其CPU高速缓存中，它甚至可以将缓存的一部分内容读入其内部寄存器，然后对其执行操作。当CPU需要将结果写回主存储器时，它将把值从其内部寄存器刷新到高速缓存，并在某个时候将值刷新回主存储器。")]),a._v(" "),e("p",[a._v("当CPU需要将其他内容存储在高速缓存中时，通常会将高速缓存中已经存储的值刷新回主存储器。 CPU高速缓存可以一次将数据写入其部分缓存空间，并一次刷新其部分内存。它不必每次更新都读取/写入全部的缓存，通常，缓存在称为“缓存行”的较小存储块中更新，可以将一个或多个高速缓存行读入高速缓存存储器，并且可以将一个或多个高速缓存行再次刷新回主存储器。")]),a._v(" "),e("h1",{attrs:{id:"java内存模型和硬件内存结构的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java内存模型和硬件内存结构的关系"}},[a._v("#")]),a._v(" Java内存模型和硬件内存结构的关系")]),a._v(" "),e("p",[a._v("如前所述，Java内存模型和硬件内存体系结构是不同的， 硬件内存体系结构不区分线程堆栈和堆。 在硬件上，线程堆栈和堆都位于主内存中；有时，部分线程堆栈和堆可能会出现在CPU缓存和内部CPU寄存器中。 下图对此进行了说明：")]),a._v(" "),e("p",[e("img",{attrs:{src:"http://img.zhoubg.cn/FvN7YbRp9nIkK3I2aNRJuusCMr8S",alt:"image.png"}})]),a._v(" "),e("p",[a._v("当对象和变量可以存储在计算机的各种不同存储区域中时，就可能会出现某些问题了，两个主要问题是：")]),a._v(" "),e("ul",[e("li",[a._v("线程更新（写入）到共享变量的可见性。")]),a._v(" "),e("li",[a._v("读取，检查和写入共享变量时的竞争条件。")])]),a._v(" "),e("p",[a._v("这两个问题将在以下各节中进行说明。")]),a._v(" "),e("h2",{attrs:{id:"共享对象的可见性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#共享对象的可见性"}},[a._v("#")]),a._v(" 共享对象的可见性")]),a._v(" "),e("p",[a._v("如果两个或多个线程共享一个对象，并且没有正确使用"),e("code",[a._v("volatitle")]),a._v("声明或同步，则一个线程对共享对象进行的更新可能对其他线程不可见。")]),a._v(" "),e("p",[a._v("想象一下，共享对象最初存储在主存储器中，然后，在CPU上运行的一个线程将共享对象读入其CPU缓存中，在那里，它更改了共享对象。只要未将CPU高速缓存刷新回主内存，在其他CPU上运行的线程就看不到共享对象更改后的版本。这样，每个线程都可以拥有自己的共享对象副本，每个副本位于不同的CPU缓存中。")]),a._v(" "),e("p",[a._v("下图说明了这种情况。在左CPU上运行的一个线程将共享对象复制到其CPU缓存中，并将其"),e("code",[a._v("count")]),a._v("变量值加一变成2,在右CPU上运行的其他线程看不到此更改，因为左线程还未将··更新刷新回主存储器中。")]),a._v(" "),e("p",[e("img",{attrs:{src:"http://img.zhoubg.cn/Fh3rnLlrYdxSR685Nckw1Z3J5d5U",alt:"image.png"}})]),a._v(" "),e("p",[a._v("要解决此问题，您可以使用Java的"),e("code",[a._v("volatile")]),a._v("关键字, "),e("code",[a._v("volatile")]),a._v("关键字可以确保给定的变量直接从主存储器中读取，并在更新时始终写回到主存储器中。")]),a._v(" "),e("h2",{attrs:{id:"竞争条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#竞争条件"}},[a._v("#")]),a._v(" 竞争条件")]),a._v(" "),e("p",[a._v("如果两个或多个线程共享一个对象，并且有多个线程更新该共享对象中的变量，则可能会发生竞争条件。")]),a._v(" "),e("p",[a._v("想象一下，线程A将共享对象的变量"),e("code",[a._v("count")]),a._v("读入其CPU缓存中。还要想象一下，线程B的功能相同，但是它位于不同的CPU缓存中。现在线程A给"),e("code",[a._v("count")]),a._v("加1，线程B执行相同的操作，现在"),e("code",[a._v("count")]),a._v("已经加了两次，在每个CPU高速缓存中分别加了一次。")]),a._v(" "),e("p",[a._v("如果这些增加是顺序执行的，则变成"),e("code",[a._v("count")]),a._v("将增加两次，并将原始值+ 2写回到主存储器。")]),a._v(" "),e("p",[a._v("但是，这两个增量是在没有适当同步的情况下同时执行的，不管线程A和B中哪个线程将其更新后的"),e("code",[a._v("count")]),a._v("写回主存中，虽然有两个增量，但更新后的值仅比原始值大1。")]),a._v(" "),e("p",[a._v("该图说明了如上所述的竞争条件问题的发生：")]),a._v(" "),e("p",[e("img",{attrs:{src:"http://img.zhoubg.cn/FvB3aSSP2ql2ct0OoB_GJVkqqHFz",alt:"image.png"}})]),a._v(" "),e("p",[a._v("要解决此问题，您可以使用Java同步块（"),e("code",[a._v("synchronized block")]),a._v("）。 同步块可确保在任何给定时间只有一个线程可以进入代码的给定关键部分。 同步块还保证从同步块中读取的所有变量都从主存储器中读取，并且当线程退出同步块时，所有更新的变量将再次刷新回主存储器，不管该变量有没有声明为"),e("code",[a._v("volatile")]),a._v("。")])])}),[],!1,null,null,null);t.default=v.exports}}]);