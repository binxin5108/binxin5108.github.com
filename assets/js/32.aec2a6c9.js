(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{524:function(t,a,s){"use strict";s.r(a);var e=s(22),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("**"),s("code",[t._v("结构型模式")]),t._v("**关注点“"),s("code",[t._v("怎样组合对象/类？")]),t._v("”所以我们关注下类的组合关系")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("类结构型模式")]),t._v("关心类的组合，由多个类可以组合成一个更大的（继承）")]),t._v(" "),s("li",[s("code",[t._v("对象结构型模式")]),t._v("关心类与对象的组合，通过"),s("strong",[t._v("关联关系")]),t._v("在一个类中定义另一个类的实例对象（组合）")])]),t._v(" "),s("p",[t._v("根据“"),s("strong",[t._v("合成复用原则")]),t._v("”，在系统中尽量使用关联关系来替代继承关系，因此大部分结构型模式都是对象结构型模式。")]),t._v(" "),s("p",[t._v("结构性模式包括："),s("code",[t._v("外侨（桥）组员（元）戴（代）配饰")])]),t._v(" "),s("ul",[s("li",[t._v("适配器模式（Adapter Pattern）：两个不兼容接口之间适配的桥梁")]),t._v(" "),s("li",[t._v("桥接模式（Bridge Pattern）：相同功能抽象化与实现化解耦，抽象与实现可以独立升级。")]),t._v(" "),s("li",[t._v("过滤器模式（Filter、Criteria Pattern）：使用不同的标准来过滤一组对象")]),t._v(" "),s("li",[t._v("组合模式（Composite Pattern）：相似对象进行组合，形成树形结构")]),t._v(" "),s("li",[t._v("装饰器模式（Decorator Pattern）：向一个现有的对象添加新的功能，同时又不改变其结构")]),t._v(" "),s("li",[t._v("外观模式（Facade Pattern）：向现有的系统添加一个接口，客户端访问此接口来隐藏系统的复杂性。")]),t._v(" "),s("li",[t._v("享元模式（Flyweight Pattern）：尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象")]),t._v(" "),s("li",[t._v("代理模式（Proxy Pattern）：一个类代表另一个类的功能")])]),t._v(" "),s("h2",{attrs:{id:"_1-适配器模式-adapter-pattern"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-适配器模式-adapter-pattern"}},[t._v("#")]),t._v(" 1. 适配器模式（Adapter Pattern）")]),t._v(" "),s("blockquote",[s("p",[t._v("将"),s("strong",[t._v("一个接口")]),s("code",[t._v("转换")]),t._v("成客户希望的"),s("strong",[t._v("另一个接口")]),t._v("，适配器模式使接口不兼容的那些类可以一起工作，适配器模式分为类结构型模式（继承）和对象结构型模式（组合）两种，前者（继承）类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。")])]),t._v(" "),s("p",[s("strong",[t._v("适配器模式")]),t._v("有时候也称包装样式或者包装（wrapper）")]),t._v(" "),s("p",[t._v("适配器模式（Adapter）包含以下主要角色：")]),t._v(" "),s("ul",[s("li",[t._v("目标（Target）接口：可以是抽象类或接口。客户希望直接用的接口")]),t._v(" "),s("li",[t._v("适配者（Adaptee）类：隐藏的转换接口")]),t._v(" "),s("li",[t._v("适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口。")])]),t._v(" "),s("p",[s("strong",[t._v("1、 类结构型")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://img.zhoubg.cn/static/a61e2c3f-af7b-4f25-8b77-e26e7e24dd12.png",alt:"a61e2c3f-af7b-4f25-8b77-e26e7e24dd12"}})]),t._v(" "),s("p",[s("strong",[t._v("2、对象结构型")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://img.zhoubg.cn/static/d3826949-76a0-482f-8fe9-214c1e49200a.png",alt:"d3826949-76a0-482f-8fe9-214c1e49200a"}})]),t._v(" "),s("h3",{attrs:{id:"应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),s("p",[t._v("什么场景用到？")]),t._v(" "),s("ul",[s("li",[t._v("Tomcat如何将Request流转为标准Request；\n"),s("ul",[s("li",[t._v("tomcat.Request接口")]),t._v(" "),s("li",[t._v("servlet.Request接口")]),t._v(" "),s("li",[t._v("tomcat ===  CoyoteAdapte === ServletRequest")])])]),t._v(" "),s("li",[t._v("Spring AOP中的AdvisorAdapter是什么：增强的适配器\n"),s("ul",[s("li",[t._v("前置、后置、返回、结束  Advisor（通知方法）")]),t._v(" "),s("li",[t._v("底层真的目标方法")])])]),t._v(" "),s("li",[t._v("Spring MVC中经典的HandlerAdapter是什么；\n"),s("ul",[s("li",[t._v("HelloController.hello()")]),t._v(" "),s("li",[t._v("HandlerAdapter")]),t._v(" "),s("li",[t._v("Servlet.doGet()")])])]),t._v(" "),s("li",[t._v("SpringBoot 中 WebMvcConfigurerAdapter为什么存在又取消")])]),t._v(" "),s("h2",{attrs:{id:"_2-桥接模式-bridge-pattern"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-桥接模式-bridge-pattern"}},[t._v("#")]),t._v(" 2. 桥接模式（Bridge Pattern）")]),t._v(" "),s("blockquote",[s("p",[t._v("把事物对象和其具体行为、具体特征分离开来，使它们可以各自独立的变化")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("桥接将继承转为关联，降低类之间的耦合度，减少代码量")]),t._v(" "),s("p",[t._v("在现实生活中，某些类具有两个或多个维度的变化，如手机既可按功能分，又可按渠道分。如何设计类似于 Photoshop 这样的软件，能画不同形状和不同颜色的图形呢？如果用继承方式，m 种形状和 n 种颜色的图形就有 m×n 种，不但对应的子类很多，而且扩展困难。不同颜色和字体的文字、不同品牌和功率的汽车")])])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://img.zhoubg.cn/static/image-20220328224034345.png",alt:"image-20220328224034345"}}),t._v(" "),s("p",[t._v("桥接（Bridge）模式包含以下主要角色。\n系统设计期间，如果这个类里面的一些东西，会扩展很多，这个东西就应该分离出来")]),t._v(" "),s("ul",[s("li",[t._v("抽象化（Abstraction）角色：定义抽象类，并包含一个对实现化对象的引用。")]),t._v(" "),s("li",[t._v("扩展抽象化（Refined Abstraction）角色：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。")]),t._v(" "),s("li",[t._v("实现化（Implementor）角色：定义实现化角色的接口，供扩展抽象化角色调用。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://img.zhoubg.cn/static/e00d60bb-8c0b-4515-8f59-87c688b407f2.png",alt:"e00d60bb-8c0b-4515-8f59-87c688b407f2"}})]),t._v(" "),s("h3",{attrs:{id:"应用场景-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-2"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),s("p",[t._v("什么场景用到？")]),t._v(" "),s("ul",[s("li",[t._v("当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时。")]),t._v(" "),s("li",[t._v("当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时。")]),t._v(" "),s("li",[t._v("当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时。")]),t._v(" "),s("li",[t._v("InputStreamReader桥接模式。An InputStreamReader is a bridge from byte streams to character streams:")]),t._v(" "),s("li",[t._v("InputStreamReader 桥接+适配器")])]),t._v(" "),s("h2",{attrs:{id:"_3-装饰器模式-decorator-wrapper-包装-pattern"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-装饰器模式-decorator-wrapper-包装-pattern"}},[t._v("#")]),t._v(" 3. 装饰器模式（Decorator/Wrapper（包装） Pattern）")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("动态地给一个对象添加一些额外的职责。就增加功能来说，相比生成子类更为灵活。")])])]),t._v(" "),s("ul",[s("li",[t._v("适配器是连接两个类，"),s("code",[t._v("增强一个类")]),t._v("，"),s("code",[t._v("装饰器是增强一个类")])]),t._v(" "),s("li",[t._v("向一个现有的对象添加新的功能，同时又不改变其结构。属于对象结构型模式。")]),t._v(" "),s("li",[t._v("创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。")])]),t._v(" "),s("img",{staticStyle:{zoom:"30%"},attrs:{src:"http://img.zhoubg.cn/static/1920px-Decorator_UML_class_diagram.svg.png",alt:"1920px-Decorator_UML_class_diagram.svg"}}),t._v(" "),s("p",[t._v("包含角色：")]),t._v(" "),s("ul",[s("li",[t._v("抽象构件（Component）角色：定义一个抽象接口以规范准备接收附加责任的对象。")]),t._v(" "),s("li",[t._v("具体构件（ConcreteComponent）角色：实现抽象构件，通过装饰角色为其添加一些职责。")]),t._v(" "),s("li",[t._v("抽象装饰（Decorator）角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。")]),t._v(" "),s("li",[t._v("具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。")])]),t._v(" "),s("p",[t._v("以"),s("code",[t._v("InputStream")]),t._v("为例：")]),t._v(" "),s("ul",[s("li",[t._v("抽象构件（Component）: "),s("code",[t._v("InputStream")])]),t._v(" "),s("li",[t._v("具体构件（ConcreteComponent）："),s("code",[t._v("FileInputStream")]),t._v("、"),s("code",[t._v("ServletInputStream")])]),t._v(" "),s("li",[t._v("抽象装饰（Decorator）: "),s("code",[t._v("FilterInputStream")])]),t._v(" "),s("li",[t._v("具体装饰（ConcreteDecorator）："),s("code",[t._v("BufferedInputStream")]),t._v("、"),s("code",[t._v("GZIPInputStream")])])]),t._v(" "),s("h3",{attrs:{id:"应用场景-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-3"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("无处不在.....")])]),t._v(" "),s("li",[s("p",[t._v("SpringSession中如何进行session与redis关联？HttpRequestWrapper")]),t._v(" "),s("ul",[s("li",[t._v("session：数据存在了内存")]),t._v(" "),s("li",[t._v("session：数据存在redis")]),t._v(" "),s("li",[t._v("HttpSession；getAttribute();")]),t._v(" "),s("li",[t._v("Wrapper(session){getAttribute(String param){    redis.get(param) }};")])])]),t._v(" "),s("li",[s("p",[t._v("MyBatisPlus提取了QueryWrapper，这是什么？")])]),t._v(" "),s("li",[s("p",[t._v("Spring中的BeanWrapper是做什么？包装了Bean。bean的功能增强？")])]),t._v(" "),s("li",[s("p",[t._v("Spring Webflux中的 WebHandlerDecorator？")])]),t._v(" "),s("li",[s("p",[t._v("已存的类，每一天在某个功能使用的时候发现不够，就可以装饰器。\n......")])])]),t._v(" "),s("h2",{attrs:{id:"_4-代理模式-proxy-pattern"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-代理模式-proxy-pattern"}},[t._v("#")]),t._v(" 4. 代理模式（Proxy Pattern）")]),t._v(" "),s("blockquote",[s("p",[t._v("为其他对象提供一种代理以"),s("code",[t._v("控制对这个对象的访问")]),t._v(". 这种也叫静态代理")])]),t._v(" "),s("p",[t._v("和适配器模式很类似：适配器用于把A接口转换为B接口，代理模式A接口还是转换为A接口")]),t._v(" "),s("img",{staticStyle:{zoom:"20%"},attrs:{src:"http://img.zhoubg.cn/static/2560px-Proxy_pattern_diagram.svg.png",alt:"2560px-Proxy_pattern_diagram.svg"}}),t._v(" "),s("p",[t._v("代理模式包含如下角色：")]),t._v(" "),s("ul",[s("li",[t._v("Subject: 抽象主体角色(抽象类或接口)")]),t._v(" "),s("li",[t._v("Proxy: 代理主体角色(代理对象类)")]),t._v(" "),s("li",[t._v("RealSubject: 真实主体角色(被代理对象类)")])]),t._v(" "),s("h3",{attrs:{id:"jdk-动态代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk-动态代理"}},[t._v("#")]),t._v(" JDK 动态代理")]),t._v(" "),s("p",[t._v("JDK 提供的一个"),s("code",[t._v("Proxy.newProxyInstance()")]),t._v("创建了一个代理对象。这种没有实现类但是在运行期动态创建了一个接口对象的方式，我们称为动态代码。JDK提供的动态创建接口对象的方式，就叫动态代理。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newProxyInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLoader")]),t._v(" loader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" interfaces"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InvocationHandler")]),t._v(" h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("只支持接口")])]),t._v(" "),s("h3",{attrs:{id:"cglib-动态代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cglib-动态代理"}},[t._v("#")]),t._v(" CGLIB 动态代理")]),t._v(" "),s("p",[t._v("Cglib是一个强大的、高性能的"),s("strong",[t._v("代码生成包")]),t._v("，它广泛被许多AOP框架使用，为他们"),s("strong",[t._v("提供方法的拦截")]),t._v("。")]),t._v(" "),s("p",[t._v("Cglib里的"),s("code",[t._v("MethodInterceptor")]),t._v("相当于 JDK 里的 "),s("code",[t._v("InvocationHandler")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DaoProxy")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodInterceptor")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intercept")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v(" method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" objects"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodProxy")]),t._v(" proxy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Before Method Invoke"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proxy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("invokeSuper")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" objects"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"After Method Invoke"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("参数说明：")]),t._v(" "),s("ul",[s("li",[t._v("Object表示要进行增强的对象")]),t._v(" "),s("li",[t._v("Method表示拦截的方法")]),t._v(" "),s("li",[t._v("Object[]数组表示参数列表，基本数据类型需要传入其包装类型，如int--\x3eInteger、long-Long、double--\x3eDouble")]),t._v(" "),s("li",[t._v("MethodProxy表示对方法的代理，invokeSuper方法表示对被代理对象方法的调用")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DaoProxy")]),t._v(" daoProxy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DaoProxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Enhancer")]),t._v(" enhancer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Enhancer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nenhancer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setSuperclass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dao")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置要代理点的对象class")]),t._v("\nenhancer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setCallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("daoProxy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置代理的具体执行逻辑")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dao")]),t._v(" dao "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dao")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("enhancer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndao"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndao"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"应用场景-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-4"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),s("ul",[s("li",[t._v("Spring AOP：JDKDynamicAopProxy、CglibAopProxy")]),t._v(" "),s("li",[t._v("Mybatis：MapperProxyFactory、MapperProxy、MapperMethod")])]),t._v(" "),s("h3",{attrs:{id:"区别-装饰器、代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别-装饰器、代理"}},[t._v("#")]),t._v(" 区别 - 装饰器、代理")]),t._v(" "),s("ul",[s("li",[t._v("装饰器和代理之间的区别很细微，可以认为装饰器是代理的一个子集。")]),t._v(" "),s("li",[t._v("静态代理就是装饰器的方式")])]),t._v(" "),s("h2",{attrs:{id:"_5-组合模式-composite-pattern"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-组合模式-composite-pattern"}},[t._v("#")]),t._v(" 5. 组合模式（Composite Pattern）")]),t._v(" "),s("blockquote",[s("p",[t._v("把一组相似的对象当作一个单一的对象。如：树形菜单")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://img.zhoubg.cn/static/image-20220330142047386.png",alt:"image-20220330142047386"}})]),t._v(" "),s("h3",{attrs:{id:"应用场景-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-5"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("层级结构：部门组织、菜单")])]),t._v(" "),s("li",[s("p",[t._v("Mybatis: SqlNode")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://img.zhoubg.cn/static/5-2010221KKJ27.png",alt:"SqlNode类图"}})])])]),t._v(" "),s("h2",{attrs:{id:"_6-外观模式-facade-pattern"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-外观模式-facade-pattern"}},[t._v("#")]),t._v(" 6. 外观模式（Facade Pattern）")]),t._v(" "),s("blockquote",[s("p",[t._v("外观（Facade）模式又叫作门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式")])]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"http://img.zhoubg.cn/static/image-20220330142558158.png",alt:"image-20220330142558158"}}),t._v(" "),s("h3",{attrs:{id:"应用场景-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-6"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),s("ul",[s("li",[t._v("分布式系统的网关")]),t._v(" "),s("li",[t._v("Java 三层开发模式")]),t._v(" "),s("li",[t._v("微信支付/支付宝支付：统一支付API（整合扫码支付、APP支付、JS支付等）")]),t._v(" "),s("li",[t._v("Tomcat的RequestFacade")])]),t._v(" "),s("h2",{attrs:{id:"_7-享元模式-flyweight-pattern"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-享元模式-flyweight-pattern"}},[t._v("#")]),t._v(" 7. 享元模式（Flyweight Pattern）")]),t._v(" "),s("ul",[s("li",[t._v("享元模式(Flyweight Pattern)，运用"),s("strong",[t._v("共享技术")]),t._v("有效地支持"),s("strong",[t._v("大量细粒度对象的复用")]),t._v("。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。对象结构型")]),t._v(" "),s("li",[t._v("在享元模式中"),s("strong",[t._v("可以共享的相同内容称为内部状态(IntrinsicState)")]),t._v("，而那些需要外部环境来设置的"),s("strong",[t._v("不能共享的内容称为外部状态(Extrinsic State)")]),t._v("，由于区分了内部状态和外部状态，因此可以通过设置不同的外部状态使得相同的对象可以具有一些不同的特征，而相同的内部状态是可以共享的。")]),t._v(" "),s("li",[t._v("在享元模式中通常会出现工厂模式，需要创建一个**享元工厂来负责维护一个享元池(Flyweight Pool)**用于存储具有相同内部状态的享元对象。")])]),t._v(" "),s("h3",{attrs:{id:"应用场景-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-7"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),s("ul",[s("li",[t._v("典型代表：数据库连接池")]),t._v(" "),s("li",[t._v("所有池化技术")]),t._v(" "),s("li",[t._v("缓存技术：客户端如果重复请求某些对象，不必每次查询数据库，而是直接返回内存中缓存的数据")]),t._v(" "),s("li",[t._v("JDK 常量池："),s("code",[t._v("Integer.valueOf()")]),t._v("、"),s("code",[t._v("Long.valueOf()")]),t._v("...")])]),t._v(" "),s("h2",{attrs:{id:"_8-过滤器模式-filter-pattern"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-过滤器模式-filter-pattern"}},[t._v("#")]),t._v(" 8. 过滤器模式（Filter Pattern）")]),t._v(" "),s("blockquote",[s("p",[t._v("使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。结合多个标准来获得单一标准")])])])}),[],!1,null,null,null);a.default=n.exports}}]);