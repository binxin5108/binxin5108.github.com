(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{557:function(t,v,e){"use strict";e.r(v);var r=e(22),_=Object(r.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"什么是ioc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是ioc"}},[t._v("#")]),t._v(" 什么是IoC")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC",target:"_blank",rel:"noopener noreferrer"}},[t._v("维基百科"),e("OutboundLink")],1),t._v("的定义：")]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("控制反转")]),t._v("（英语：Inversion of Control，缩写为"),e("strong",[t._v("IoC")]),t._v("），是"),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("面向对象编程"),e("OutboundLink")],1),t._v("中的一种设计原则，可以用来减低计算机代码之间的"),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E8%80%A6%E5%90%88%E5%BA%A6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)",target:"_blank",rel:"noopener noreferrer"}},[t._v("耦合度"),e("OutboundLink")],1),t._v("。其中最常见的方式叫做"),e("strong",[t._v("依赖注入")]),t._v("（Dependency Injection，简称"),e("strong",[t._v("DI")]),t._v("），还有一种方式叫“依赖查找”（Dependency Lookup）")])]),t._v(" "),e("h2",{attrs:{id:"ioc-简史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ioc-简史"}},[t._v("#")]),t._v(" IOC 简史")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("1983年，好莱坞原则：\"don't call us, we'll call you\"")]),t._v(" "),e("blockquote",[e("p",[t._v("喜剧之王里面的周星驰时常打电话给剧组霞姐问一问有没有他可以演的龙套角色，然后霞姐告诉他：你不要在打电话过来了，有角色我会打给你的。")])])]),t._v(" "),e("li",[e("p",[t._v("2003年，Martin Fowler 在《Inversion of Control Containers and the Dependency Injection pattern》中提出了自己对 IoC 以及 DI 的理解")]),t._v(" "),e("blockquote",[e("p",[t._v("Martin Fowler 总结依赖对象的获得被反转了")])])]),t._v(" "),e("li",[e("p",[t._v("2005年，Martin Fowler 在 《InversionOfControl》对 IoC 做出进一步的说明")])])]),t._v(" "),e("h2",{attrs:{id:"ioc-的主要实现策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ioc-的主要实现策略"}},[t._v("#")]),t._v(" IoC 的主要实现策略")]),t._v(" "),e("p",[t._v("主要有依赖注入和依赖查找两种方式：")]),t._v(" "),e("ol",[e("li",[e("p",[e("strong",[t._v("依赖注入：")])]),t._v(" "),e("ul",[e("li",[t._v("基于接口：实现特定接口以供外部容器注入所依赖类型的对象。")]),t._v(" "),e("li",[t._v("基于 set 方法：实现特定属性的public set方法，来让外部容器调用传入所依赖类型的对象。")]),t._v(" "),e("li",[t._v("基于构造函数：实现特定参数的构造函数，在新建对象时传入所依赖类型的对象。")]),t._v(" "),e("li",[t._v("基于注解：基于"),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/Java%E6%B3%A8%E8%A7%A3",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java的注解功能"),e("OutboundLink")],1),t._v("，在私有变量前加“@Autowired”等注解，不需要显式的定义以上三种代码，便可以让外部容器传入对应的对象。该方案相当于定义了public的set方法，但是因为没有真正的set方法，从而不会为了实现依赖注入导致暴露了不该暴露的接口（因为set方法只想让容器访问来注入而并不希望其他依赖此类的对象访问）。")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("依赖查找：")])]),t._v(" "),e("p",[t._v("依赖查找更加主动，在需要的时候通过调用框架提供的方法来获取对象，获取时需要提供相关的配置文件路径、key等信息来确定获取对象的状态")])])]),t._v(" "),e("h2",{attrs:{id:"ioc-容器的职责"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ioc-容器的职责"}},[t._v("#")]),t._v(" IoC 容器的职责")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("依赖处理：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("依赖查找")])]),t._v(" "),e("li",[e("p",[t._v("依赖注入")])])])]),t._v(" "),e("li",[e("p",[t._v("生命周期管理：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("容器生命周期")])]),t._v(" "),e("li",[e("p",[t._v("托管的资源的生命周期（Java Beans 或 其他资源）")])])])]),t._v(" "),e("li",[e("p",[t._v("配置管理：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("容器配置")])]),t._v(" "),e("li",[e("p",[t._v("外部化配置")])]),t._v(" "),e("li",[e("p",[t._v("托管的资源的配置（Java Beans 或 其他资源）")])])])])]),t._v(" "),e("h2",{attrs:{id:"ioc-容器的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ioc-容器的实现"}},[t._v("#")]),t._v(" IOC 容器的实现")]),t._v(" "),e("ul",[e("li",[t._v("Java SE\n"),e("ul",[e("li",[t._v("Java Beans")]),t._v(" "),e("li",[t._v("Java ServiceLoader SPI")]),t._v(" "),e("li",[t._v("JNDI")])])]),t._v(" "),e("li",[t._v("Java EE\n"),e("ul",[e("li",[t._v("EJB")]),t._v(" "),e("li",[t._v("Servlet")])])]),t._v(" "),e("li",[t._v("开源\n"),e("ul",[e("li",[t._v("Apache Avalon（http://avalon.apache.org/closed.html）")]),t._v(" "),e("li",[t._v("PicoContainer（http://picocontainer.com/）")]),t._v(" "),e("li",[t._v("Google Guice（https://github.com/google/guice）")]),t._v(" "),e("li",[t._v("Spring Framework（https://spring.io/projects/spring-framework）")])])])]),t._v(" "),e("h2",{attrs:{id:"依赖查找-vs-依赖注入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#依赖查找-vs-依赖注入"}},[t._v("#")]),t._v(" 依赖查找 VS 依赖注入")]),t._v(" "),e("ul",[e("li",[t._v("优劣对比")])]),t._v(" "),e("p",[e("img",{attrs:{src:"http://img.zhoubg.cn/static/image-20211221224849772.png",alt:"image-20211221224849772"}})]),t._v(" "),e("h2",{attrs:{id:"面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[t._v("#")]),t._v(" 面试题")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("什么是 IoC ？")]),t._v(" "),e("p",[t._v("简单地说，IoC 是反转控制，类似于好莱坞原则，主要有依赖查找和依赖注入实现")])]),t._v(" "),e("li",[e("p",[t._v("依赖查找和依赖注入的区别？")]),t._v(" "),e("p",[t._v("依赖查找是主动或手动的依赖查找方式，通常需要依赖容器或标准 API实现。而依赖注入则是手动或自动依赖绑定的方式，无需依赖特定的容器和API")])])])])}),[],!1,null,null,null);v.default=_.exports}}]);