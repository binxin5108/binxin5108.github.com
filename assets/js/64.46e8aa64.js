(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{555:function(_,v,o){"use strict";o.r(v);var t=o(22),e=Object(t.a)({},(function(){var _=this,v=_.$createElement,o=_._self._c||v;return o("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[o("iframe",{attrs:{src:_.$withBase("/markmap/mysql-redo-binlog.html"),width:"100%",height:"400",frameborder:"0",scrolling:"No",leftmargin:"0",topmargin:"0"}}),_._v(" "),o("p",[_._v("上文分析了查询语句的执行流程，知道一条查询语句执行过程一般经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。")]),_._v(" "),o("p",[_._v("那么更新语句的执行流程是怎样的？")]),_._v(" "),o("p",[_._v("假设有如下表：")]),_._v(" "),o("div",{staticClass:"language-sql extra-class"},[o("pre",{pre:!0,attrs:{class:"language-sql"}},[o("code",[_._v("mysql"),o("span",{pre:!0,attrs:{class:"token operator"}},[_._v(">")]),_._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("create")]),_._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("table")]),_._v(" T"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),_._v("ID "),o("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("int")]),_._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("primary")]),_._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("key")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" c "),o("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("int")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n")])])]),o("p",[_._v("如果要将 ID=2 的这一行的值加 1 ，SQL 语句就会这么写：")]),_._v(" "),o("div",{staticClass:"language-sql extra-class"},[o("pre",{pre:!0,attrs:{class:"language-sql"}},[o("code",[_._v("mysql"),o("span",{pre:!0,attrs:{class:"token operator"}},[_._v(">")]),_._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("update")]),_._v(" T "),o("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("set")]),_._v(" c"),o("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v("c"),o("span",{pre:!0,attrs:{class:"token operator"}},[_._v("+")]),o("span",{pre:!0,attrs:{class:"token number"}},[_._v("1")]),_._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("where")]),_._v(" ID"),o("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),o("span",{pre:!0,attrs:{class:"token number"}},[_._v("2")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n")])])]),o("p",[_._v("可以确定的是，更新语句的基本执行链路肯定也和查询语句的那套流程一样，也会走一遍：")]),_._v(" "),o("img",{staticStyle:{zoom:"60%"},attrs:{src:"http://img.zhoubg.cn/static/image-20220106111519471.png",alt:"image-20220106111519471"}}),_._v(" "),o("p",[_._v("先要连接数据库，这是连接器的工作")]),_._v(" "),o("p",[_._v("前面我们说过，表上的更新操作会导致这个表上缓存清空失效。这也是不建议使用查询缓存的原因")]),_._v(" "),o("p",[_._v("接下来通过词法和语法分析解析出这事一条更新语句。优化器决定要使用 ID 这个索引。然后执行器负责具体执行，找到这一行，然后更新。")]),_._v(" "),o("p",[_._v("和查询流程不同的是，更新流程还涉及两个重要的日志模块："),o("code",[_._v("redo log")]),_._v(" (重做日志)、"),o("code",[_._v("binlog")]),_._v(" （归档日志）。也是本文讨论的主角，两者在设计上有很多有意思的地方，我们可以参考借鉴。")]),_._v(" "),o("h2",{attrs:{id:"redo-log"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#redo-log"}},[_._v("#")]),_._v(" redo log")]),_._v(" "),o("p",[_._v("想象下现实场景：酒店掌柜用粉板+账本记录赊账，如果有人要赊账或还账掌柜有两种做法：")]),_._v(" "),o("ol",[o("li",[_._v("每次直接把账本翻出来，把这次的账加上去或扣掉")]),_._v(" "),o("li",[_._v("先在粉板上记下这次账，等不忙或打烊后再核算到账本上去")])]),_._v(" "),o("p",[_._v("在生意红火的时候，肯定是先记录在粉板上方便，方法 1 的操作效率太低了，首先得找到那个名字，然后在计算，最后将结果写回到账本上，如果账本几十页，效率低的让人难以忍受。")]),_._v(" "),o("p",[_._v("在 MySQL 里，如果每次更新操作都要写进磁盘，然后磁盘也要找到对应的那条记录，然后在更新，整个过程的 IO 成本、查找成本都很高。为了解决整个问题，MySQL 的设计者就用了类似粉板的设计思路来提示效率--"),o("code",[_._v("redo log")]),_._v("。")]),_._v(" "),o("blockquote",[o("p",[_._v("粉板和账本配合的整个过程其实就是 MySQL 里的 WAL  技术:")]),_._v(" "),o("p",[_._v("全称是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘，也就是先写粉板，等不忙的时候再写账本。")])]),_._v(" "),o("ul",[o("li",[_._v("一条记录需要更新时，InnoDB 引擎先把记录写到 "),o("code",[_._v("redo log")]),_._v(" （粉板）中，并更新内存。此时更新就算完成了")]),_._v(" "),o("li",[_._v("InnoDB 引擎会在适当的时候将这个操作记录更新到磁盘，一般是比较空闲的时候")])]),_._v(" "),o("p",[_._v("粉板大小是固定的，如果粉板写满了，掌柜就要停下来吧一部分赊账记录更新到账本上并将这些记录从粉板上擦掉。")]),_._v(" "),o("p",[_._v("类似的，InnoDB 的"),o("code",[_._v("redo log")]),_._v(" 的大小也是固定的，从头开始写，写到末尾有回到开头循环写，类似一个环：")]),_._v(" "),o("img",{staticStyle:{zoom:"70%"},attrs:{src:"http://img.zhoubg.cn/static/image-20220221170955865.png",alt:"image-20220221170955865"}}),_._v(" "),o("ul",[o("li",[o("code",[_._v("write pos")]),_._v("：当前记录的位置，一边写一遍往后移")]),_._v(" "),o("li",[o("code",[_._v("check point")]),_._v("：当前要擦除的位置，也是往后推移并且循环的，擦除前要吧记录更新到数据文件")]),_._v(" "),o("li",[o("code",[_._v("write pos")]),_._v(" 和 "),o("code",[_._v("check point")]),_._v(" 之间的位置就是空着的部分，用来记录新的操作")]),_._v(" "),o("li",[_._v("如果 "),o("code",[_._v("write pos")]),_._v(" 追上了 "),o("code",[_._v("check point")]),_._v("，表示“粉板”满了，需要停下来擦掉一部分记录，把 "),o("code",[_._v("check point")]),_._v("往后推进")])]),_._v(" "),o("blockquote",[o("p",[o("strong",[o("code",[_._v("crash-safe")])]),_._v(":有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为"),o("strong",[_._v("crash-safe")])])]),_._v(" "),o("h2",{attrs:{id:"binlog"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#binlog"}},[_._v("#")]),_._v(" binlog")]),_._v(" "),o("p",[_._v("MySQL 整体分为两大模块：server 层负责 MySQL 功能层面的事情，引擎层负责存储相关事宜。")]),_._v(" "),o("p",[o("code",[_._v("redo log")]),_._v(" 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 "),o("code",[_._v("binlog")]),_._v(" (归档日志)")]),_._v(" "),o("p",[o("strong",[_._v("为什么会有两份日志呢")]),_._v("❓")]),_._v(" "),o("p",[_._v("最开始 MySQL 没有 InnoDB 引擎，MySQL 自带的是 MyISAM 引擎，MyISAM 没有 "),o("code",[_._v("crash-safe")]),_._v(" 能力，"),o("code",[_._v("binlog")]),_._v(" 只能用于归档。而 InnoDB 是另一家公司以插件形式引入 MySQL 的，依靠 "),o("code",[_._v("binlog")]),_._v(" 没有 "),o("code",[_._v("crash-safe")]),_._v(" 能力，所以 InnoDB 使用另一套日志系统——也就是 "),o("code",[_._v("redo log")]),_._v(" 来实现 "),o("code",[_._v("crash-safe")]),_._v(" 能力。")]),_._v(" "),o("p",[o("strong",[_._v("redolog 和 binlog 区别⭐️")])]),_._v(" "),o("table",[o("thead",[o("tr",[o("th"),_._v(" "),o("th",[_._v("所属层")]),_._v(" "),o("th",[_._v("日志形式")]),_._v(" "),o("th",[_._v("写入方式")]),_._v(" "),o("th",[_._v("日志大小")])])]),_._v(" "),o("tbody",[o("tr",[o("td",[o("code",[_._v("redo log")])]),_._v(" "),o("td",[_._v("引擎层")]),_._v(" "),o("td",[_._v("物理日志")]),_._v(" "),o("td",[_._v("循环写")]),_._v(" "),o("td",[_._v("固定")])]),_._v(" "),o("tr",[o("td",[o("code",[_._v("binlog")])]),_._v(" "),o("td",[_._v("Server层")]),_._v(" "),o("td",[_._v("逻辑日志")]),_._v(" "),o("td",[_._v("追加写")]),_._v(" "),o("td",[_._v("不固定")])])])]),_._v(" "),o("p",[o("strong",[_._v("执行器和 InnoDB 引擎执行 update 语句时的内部流程：")])]),_._v(" "),o("ol",[o("li",[_._v("执行器先找引擎取 ID=2 这一行。这一行所在数据页在内存中，直接返回给执行器；否则从磁盘加载到内存，在返回。")]),_._v(" "),o("li",[_._v("执行器拿到引擎给的行数据，把值加上1，得到新的一行数据，再调用引擎接口写入这行新数据。")]),_._v(" "),o("li",[_._v("引擎将新数据更新到内存中，同时把这个更新操作记录到 "),o("code",[_._v("redo log")]),_._v(" 中，此时 "),o("code",[_._v("redo log")]),_._v(" 处于 prepare 状态。然后告诉执行器完成了，随时可以提交事务。")]),_._v(" "),o("li",[_._v("执行器将这个操作记录到 "),o("code",[_._v("binlog")]),_._v("，并把 "),o("code",[_._v("binlog")]),_._v(" 写入磁盘。")]),_._v(" "),o("li",[_._v("执行器调用引擎提交事务接口，引擎把刚刚写入的 "),o("code",[_._v("redo log")]),_._v(" 改成提交 （commit）状态，更新完成。")])]),_._v(" "),o("img",{staticStyle:{zoom:"60%"},attrs:{src:"http://img.zhoubg.cn/static/image-20220222153513324.png",alt:"image-20220222153513324"}}),_._v(" "),o("p",[_._v("上述流程将 "),o("code",[_._v("redo log")]),_._v(" 的写入拆成了两个步骤：prepare 和 commit，这就是“两阶段提交”")]),_._v(" "),o("h3",{attrs:{id:"两阶段提交"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#两阶段提交"}},[_._v("#")]),_._v(" 两阶段提交")]),_._v(" "),o("p",[o("strong",[_._v("为什么必须有“两阶段提交”❓")])]),_._v(" "),o("p",[_._v("为了保持两份日志之间的逻辑一致。")]),_._v(" "),o("p",[_._v("反证法解释：")]),_._v(" "),o("p",[_._v("如果不用两阶段提交，要么先写 redo log 再写 binlog，或者反过来，用前面的 update 语句做例子来分析，假设 c 开始值为 0 。")]),_._v(" "),o("ul",[o("li",[o("p",[o("strong",[_._v("先写 "),o("code",[_._v("redo log")]),_._v(" 再写 "),o("code",[_._v("binlog")]),_._v("。")])]),_._v(" "),o("p",[_._v("假设 redo log 写完，binlog 还没写完，此时 MySQL 异常重启，前文说过 redo log 写完之后，即使系统崩溃也能够把数据恢复，所以恢复后 c 的值是 1 。但是 binlog 没写完就 crash 了，此时 binlog 是没有记录这次更新语句的，后续如果我们用 binlog 来恢复临时库话，这个临时库就会少一条更新，恢复出来的 c 值为0 ，与源库不一致。")])]),_._v(" "),o("li",[o("p",[o("strong",[_._v("先写 "),o("code",[_._v("binlog")]),_._v(" 在写 "),o("code",[_._v("redo log")]),_._v("。")])]),_._v(" "),o("p",[_._v("binlog 写完之后 crash，此时 redo log 还没写，崩溃恢复后这个事务无效，所以这一行 c 值为 0。但是 binlog 里面记录了更新语句，所以后续如果用 binlog 来恢复库时就多出来一个事务，恢复出来的这行 c 的值就是 1，与源库不一致。")])])]),_._v(" "),o("p",[_._v("如果不使用“两阶段提交”，那么数据库的状态就可能和它的日志恢复出来的的库的状态不一致。简单说，redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。")]),_._v(" "),o("h2",{attrs:{id:"小结"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[_._v("#")]),_._v(" 小结")]),_._v(" "),o("p",[_._v("两个日志：物理日志 redo log、逻辑日志 binlog")]),_._v(" "),o("p",[_._v("redo log  用于保证 crash-sage 能力。建议将 "),o("code",[_._v("innodb_flush_log_at_trx_commit")]),_._v(" 设置成 1 ，表示每次事务的 redo log 都持久化到磁盘，保证 MySQL 异常重启之后数据不丢失。")]),_._v(" "),o("p",[_._v("binlog 归档日志用户同步/恢复数据。建议将"),o("code",[_._v("sync_binlog")]),_._v(" 参数设置成 1，表示每次事务的 binlog 都持久化到磁盘，这样可以保证 MySQL 异常重启之后 binlog 不丢失。")])])}),[],!1,null,null,null);v.default=e.exports}}]);