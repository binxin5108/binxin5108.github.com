(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{523:function(t,_,v){"use strict";v.r(_);var a=v(22),r=Object(a.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("创建型模式（Creational Patterns）：")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("单例（Singleton）模式")])]),t._v(" "),v("li",[v("strong",[t._v("抽象工厂（AbstractFactory）模式")])]),t._v(" "),v("li",[v("strong",[t._v("原型（Prototype）模式")])]),t._v(" "),v("li",[v("strong",[t._v("建造者（Builder）模式")])]),t._v(" "),v("li",[v("strong",[t._v("工厂方法（FactoryMethod）模式")])])]),t._v(" "),v("p",[t._v("速记口诀："),v("code",[t._v("单抽元件厂")])]),t._v(" "),v("p",[t._v("为什么用创建型模式？")]),t._v(" "),v("ul",[v("li",[t._v("创建型模式关注点“"),v("code",[t._v("怎样创建对象")]),t._v("”")]),t._v(" "),v("li",[t._v("“"),v("code",[t._v("将对象创建和使用分离")]),t._v("”")]),t._v(" "),v("li",[t._v("降低系统耦合度")]),t._v(" "),v("li",[t._v("使用者无需关注对象的创建细节：\n"),v("ul",[v("li",[t._v("对象创建由相关工厂来完成：（各种工厂模式）")]),t._v(" "),v("li",[t._v("对象创建由一个创建者完成：（建造者模式）")]),t._v(" "),v("li",[t._v("对象创建由原来对象克隆完成：（原型模式）")]),t._v(" "),v("li",[t._v("对象始终在系统中只有一个：（单例模式）")])])])]),t._v(" "),v("h2",{attrs:{id:"_1-单例-singleton-模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-单例-singleton-模式"}},[t._v("#")]),t._v(" 1. 单例（Singleton）模式")]),t._v(" "),v("p",[v("code",[t._v("一个单一的类，负责创建自己的对象，同时确保系统中只有单个的对象被创建。")])]),t._v(" "),v("p",[t._v("单例特点：")]),t._v(" "),v("ul",[v("li",[t._v("某个类只能有一个实例：（构造器私有）")]),t._v(" "),v("li",[t._v("它必须自行创建这个实例：（自己编写实例化逻辑）")]),t._v(" "),v("li",[t._v("它必须自行向整个系统提供这个实例：（对外提供实例化方法）")])]),t._v(" "),v("p",[t._v("实现方式：")]),t._v(" "),v("ul",[v("li",[t._v("懒汉模式")]),t._v(" "),v("li",[t._v("饿汉模式：线程安全问题（synchronized、double check、volatile）")])]),t._v(" "),v("p",[v("img",{attrs:{src:"http://img.zhoubg.cn/static/image.png",alt:"image"}})]),t._v(" "),v("p",[t._v("什么场景用到？")]),t._v(" "),v("ul",[v("li",[t._v("多线程中的线程池")]),t._v(" "),v("li",[t._v("数据库中的连接池")]),t._v(" "),v("li",[t._v("系统环境信息")]),t._v(" "),v("li",[t._v("上下文信息（ServerletContext）")]),t._v(" "),v("li",[t._v("... ...")])]),t._v(" "),v("p",[t._v("面试问题：")]),t._v(" "),v("ul",[v("li",[t._v("系统环境信息（System.getProperties()）？")]),t._v(" "),v("li",[t._v("Spring 中怎么保证组件单例？")]),t._v(" "),v("li",[t._v("ServletContext 是什么 （封装 Servlet 的信息）？是单例吗？ 怎么保证？")]),t._v(" "),v("li",[t._v("ApplicationContext 是什么？是单例吗？怎么保证？\n"),v("ul",[v("li",[t._v("ApplicationContext：tomcat：一个应用（war）会有一个上下文")]),t._v(" "),v("li",[t._v("ApplicationContext：spring：表示整个 IOC 容器（怎么保证单例?）、IOC 容器中有很多组件（怎么保证单例？）")])])]),t._v(" "),v("li",[t._v("数据库连接池一般怎么创建出来的，怎么保证单例？")])]),t._v(" "),v("h2",{attrs:{id:"_2-原型-prototype-模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-原型-prototype-模式"}},[t._v("#")]),t._v(" 2. 原型（Prototype）模式")]),t._v(" "),v("p",[v("code",[t._v("原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。本体给外部提供一个克隆体进行使用")])]),t._v(" "),v("p",[t._v("特点：")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("复制 (克隆)")])])]),t._v(" "),v("p",[t._v("原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。")]),t._v(" "),v("p",[t._v("使用场景：")]),t._v(" "),v("ul",[v("li",[t._v("资源优化")]),t._v(" "),v("li",[t._v("性能和安全要求")]),t._v(" "),v("li",[t._v("一个对象多个修改者的场景")]),t._v(" "),v("li",[t._v("一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时可以考虑使用原型模式拷贝多个对象供调用者使用")]),t._v(" "),v("li",[v("code",[t._v("深拷贝")]),t._v("（两个完全对象不一样【递归克隆】，内容却完全一样）、"),v("code",[t._v("浅拷贝")]),t._v("（只是属性的赋值）")])]),t._v(" "),v("p",[v("strong",[v("code",[t._v("原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用")])])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/1/14/Prototype_UML.svg/2560px-Prototype_UML.svg.png",alt:"img"}})]),t._v(" "),v("h2",{attrs:{id:"_3-工厂-factory-模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-工厂-factory-模式"}},[t._v("#")]),t._v(" 3. 工厂（Factory）模式")]),t._v(" "),v("p",[t._v("工厂模式（Factory Pattern）提供了一种创建对象的最佳方式。我们不必关心对象的创建细节，只需要根据不同情况获取不同产品即可。难点：写好我们的工厂")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://img.zhoubg.cn/static/image-20220323222338076.png",alt:"image-20220323222338076"}}),t._v(" "),v("h3",{attrs:{id:"_3-1-简单工厂-simple-factory"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-简单工厂-simple-factory"}},[t._v("#")]),t._v(" 3.1 简单工厂（Simple Factory）")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://img.zhoubg.cn/static/simpleFactory.png",alt:"simpleFactory"}})]),t._v(" "),v("p",[t._v("三个角色：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("Factory：工厂角色， WuLinFactory")])]),t._v(" "),v("li",[v("p",[t._v("Product：抽象产品角色，Car")])]),t._v(" "),v("li",[v("p",[t._v("ConcreteProduct：具体产品角色， VanCar、MiniCar")])])]),t._v(" "),v("p",[v("strong",[v("code",[t._v("总结：具体的工厂生产一种产品，产品的系列固定")])])]),t._v(" "),v("p",[v("strong",[v("code",[t._v("缺点：违背开闭，扩展难")])]),t._v("，比如要新增一个产品系列就要改代码逻辑")]),t._v(" "),v("h3",{attrs:{id:"_3-2-工厂方法-factory-method"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-工厂方法-factory-method"}},[t._v("#")]),t._v(" 3.2 工厂方法（Factory Method）")]),t._v(" "),v("blockquote",[v("p",[v("em",[t._v("定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类。")])])]),t._v(" "),v("p",[v("img",{attrs:{src:"http://img.zhoubg.cn/static/factoryMethod.png",alt:"factoryMethod"}})]),t._v(" "),v("p",[t._v("四个角色")]),t._v(" "),v("ul",[v("li",[t._v("Product：抽象产品，Car")]),t._v(" "),v("li",[t._v("ConcreteProduct：具体产品，VanCar、MiniCar")]),t._v(" "),v("li",[v("strong",[t._v("Factory：抽象工厂，WuLinFactory   --- （新增）")])]),t._v(" "),v("li",[t._v("ConcreteFactory：具体工厂，WuLinVanFactory、WuLinMiniFactory")])]),t._v(" "),v("p",[v("strong",[v("code",[t._v("总结：由抽象工厂的具体实现生产一种产品，不同实现生产不同系列，产品系列扩展方便")])])]),t._v(" "),v("p",[v("strong",[v("code",[t._v("缺点：系统复杂度增加，产品单一，只能生产Car")])])]),t._v(" "),v("h3",{attrs:{id:"_3-3-抽象工厂-abstractfactory-method"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-抽象工厂-abstractfactory-method"}},[t._v("#")]),t._v(" 3.3 抽象工厂（AbstractFactory Method）")]),t._v(" "),v("blockquote",[v("p",[v("em",[t._v("提供一个创建一系列相关或相互依赖对象(产品)的接口，而无需指定它们具体的类。")])])]),t._v(" "),v("p",[v("img",{attrs:{src:"http://img.zhoubg.cn/static/abstractFactory.png",alt:"abstractFactory"}})]),t._v(" "),v("p",[v("strong",[v("code",[t._v("总结：工厂可以生产多种产品（car和mask），由工厂具体实现来生成所需产品")])])]),t._v(" "),v("p",[v("strong",[v("code",[t._v("人们需要什么，五菱就造什么")])]),t._v(" :: happy")]),t._v(" "),v("h3",{attrs:{id:"_3-4-工厂模式的退化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-工厂模式的退化"}},[t._v("#")]),t._v(" 3.4 工厂模式的退化")]),t._v(" "),v("p",[t._v("当抽象工厂模式中**"),v("code",[t._v("每一个具体工厂类只创建一个产品对象")]),v("strong",[t._v("，也就是只存在一个产品类型时，")]),v("code",[t._v("抽象工厂模式退化成工厂方法模式")]),v("strong",[t._v("；当工厂方法模式中抽象工厂与具体工厂合并，提供一个统一的工厂来创建产品对象，并将创建对象的工厂方法设计为静态方法时，")]),v("code",[t._v("工厂方法模式退化成简单工厂模式")]),t._v("**。")]),t._v(" "),v("h3",{attrs:{id:"_3-5-应用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-应用场景"}},[t._v("#")]),t._v(" 3.5 应用场景")]),t._v(" "),v("ul",[v("li",[t._v("NumberFormat、SimpleDateFormat、")]),t._v(" "),v("li",[t._v("LoggerFactory：")]),t._v(" "),v("li",[t._v("SqlSessionFactory：MyBatis")]),t._v(" "),v("li",[t._v("BeanFactory：Spring的BeanFactory（就是为了造出bean）\n......")])]),t._v(" "),v("h2",{attrs:{id:"_4-建造者-builder-模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-建造者-builder-模式"}},[t._v("#")]),t._v(" 4. 建造者（Builder）模式")]),t._v(" "),v("blockquote",[v("p",[v("em",[t._v("将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。")])])]),t._v(" "),v("p",[t._v("建造者模式使用多个简单的对象一步一步构建成一个复杂的对象")]),t._v(" "),v("p",[v("strong",[t._v("当一个类的构造函数参数个数超过4个，而且这些参数有些是可选的参数，考虑使用构造者模式。")])]),t._v(" "),v("img",{staticStyle:{zoom:"80%"},attrs:{src:"http://img.zhoubg.cn/static/d2ac4f71-fa24-48c4-b5e9-3063c19bd78c.png",alt:"d2ac4f71-fa24-48c4-b5e9-3063c19bd78c"}}),t._v(" "),v("p",[t._v("角色：")]),t._v(" "),v("ul",[v("li",[t._v("产品角色（Product）：Phone")]),t._v(" "),v("li",[t._v("抽象建造者（Builder）：AbstracPhoneBuilder")]),t._v(" "),v("li",[t._v("具体建造者(Concrete Builder）：PhoneBuilder")])]),t._v(" "),v("p",[t._v("创建的东西细节复杂，还必须暴露给使用者。屏蔽过程而不屏蔽细节")])])}),[],!1,null,null,null);_.default=r.exports}}]);